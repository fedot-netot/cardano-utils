#!/bin/bash

. $(dirname $0)/cardano-utils-common

PLATFORM='Free cardano pool utils'

function showHelp() {
    cat <<EOF
usage: $(basename $0) [-i INTERVAL] [-p POOLID] [-u USERID] [-g GENESISPREF] [-e ENCLAVE] [-D] [-C] [-T] [-B]
      [-L LOG_LEVEL] [-j] [-h]
  -i  Interval that will be used for regular checking.
      If not specified then send info only once and exit.
  -p  Pool id. This argument is mandatory.
  -u  Pooltool user API KEY. If not specified then environment variable with name \`POOLTOOL_API_KEY\`
      will be used for authentication. This parameter is mandatory.
  -g  Genesis block hash prefix as needed for pooltool service.
  -e  Enclave leader id. It is integer number. It is helpfull if node carries leadership of several pools.
      If specified then only slots of this enclave leader will be counted. If not specified then all slots
      will be counted regardles of which enclave it belongs to.
  -D  By default count of slots reported only on epoch change or by \`-c\` option.
      Use this option if you want to report count of slots just on program start.
  -C  Do not report count of slots for an epoch.
  -T  Do not report current tip of the node blockchain.
  -B  When reporting tip do not report internal block fields. This will reduce the load on the node.
  -L  Log level. One of the values \`error\`, \`warn\`, \`info\`, \`debug\`, \`trace\`. Only messages with
      this and stronger severity level will be logged.
  -j  Prepare messages for journald severity levels.
  -c  Count of blocks to publish. If this option is specified then only report this count of slots for
      the current epoch.
  -h  Show this help.

This scrip send information about slots count to pooltool.io statistics service.

By default, it is assumed that all time INTERVALs are set in seconds. But you can explicitly specify time units:
\`s\` - seconds, \`m\` - minutes, \`h\` - hours, \`d\` - days, \`w\` - weeks. E.g. \`25s\`, \`15m\`, \`1h\`.
EOF
}

POOLTOOL_USER_ID=$POOLTOOL_API_KEY

while getopts 'i:p:u:g:e:c:DL:CTBjh' c
do
    case $c in
        i) INTERVAL=$(printf "%s" $OPTARG | parseInterval)
           if [ -z $INTERVAL ] || (( INTERVAL < 0 )); then
               logError 'Wrong value for option `-r`' >&2
               showHelp >&2
               exit 1
           fi
           ;;
        p) POOL_ID="$OPTARG";;
        u) POOLTOOL_USER_ID="$OPTARG";;
        g) GENESISPREF="$OPTARG";;
        e) if ! is_number "$OPTARG"; then
               logError 'Wrong value for option `-e`' >&2
               showHelp >&2
               exit 1
           fi
           ENCLAVE_LEADER_ID="$OPTARG" ;;
        D) WITH_SLOTS_COUNT_REPORT_ON_START=1;;
        c) if ! is_number "$OPTARG"; then
               logError 'Wrong value for option `-c`' >&2
               showHelp >&2
               exit 1
           fi
           MANUAL_SLOTS_COUNT="$OPTARG";;
        L) if ! parseLogLevel $OPTARG; then
               logError 'Wrong value for option `-L`' >&2
               showHelp >&2
               exit 1
           fi
           ;;
        C) WO_SLOTS_COUNT_REPORT=1;;
        T) WO_TIP_REPORT=1;;
        B) WO_BLOCK_FIELDS_REPORT=1;;
        j) WITH_JOURNALD=1;;
        h) showHelp; exit 0 ;;
        ?) showHelp >&2; exit 1;;
    esac
done

if [ -z "$POOL_ID" ]; then
    logError 'Option `-p` is mandatory' >&2
    show_help=yes
fi
if [ -z "$POOLTOOL_USER_ID" ]; then
    logError 'Option `-u` is mandatory' >&2
    show_help=yes
fi
if [ -z "$GENESISPREF" ]; then
    logError 'Option `-g` is mandatory' >&2
    show_help=yes
fi
if [ -n "$MANUAL_SLOTS_COUNT" ]; then
    if [ -n "$INTERVAL" ]; then
        logError 'Options `-c` and `-i` are mutually exclusive' >&2
        show_help=yes
    fi
    if [ -n "$WO_SLOTS_COUNT_REPORT" ]; then
        logError 'Options `-c` and `-C` are mutually exclusive' >&2
        show_help=yes
    fi
    if [ -n "$ENCLAVE_LEADER_ID" ]; then
        logError 'Options `-c` and `-e` are mutually exclusive' >&2
        show_help=yes
    fi
fi
if [ -n "$show_help" ]; then
    showHelp >&2
    exit 1
fi


CURRENT_EPOCH=
CURRENT_EPOCH_BLOCK_COUNT=
LAST_EPOCH=
LAST_REPORTED_EPOCH=
LAST_SLOTS_COUNT_REPORT_TRY_TIME=

function fetchNodeStats {
    local JSON ERR_MSG
    catch JSON ERR_MSG "curl -sSf $JORMUNGANDR_RESTAPI_URL/v0/node/stats"
    if [ -n "$ERR_MSG" ]; then
        logError "$ERR_MSG" >&2
        return 1
    fi
    echo -n "$JSON"
}

function getCurrentEpoch {
    # STDIN: node stats json

    jq -r '.lastBlockDate' | cut -d. -f1
}

function fetchLeadersLogs {
    local JSON ERR_MSG

    logDebug "$ENCLAVE_LEADER_ID" >&2
    local ENCLAVE_JSON="true"
    if [ -n "$ENCLAVE_LEADER_ID" ]; then
        ENCLAVE_JSON=$(printf '.enclave_leader_id==%d' $ENCLAVE_LEADER_ID)
    fi

    local JSON ERR_MSG
    catch JSON ERR_MSG "curl -sSf $JORMUNGANDR_RESTAPI_URL/v0/leaders/logs"
    if [ -n "$ERR_MSG" ]; then
        logError "$ERR_MSG" >&2
        return 1
    fi
    logDebug "${ENCLAVE_JSON}" >&2
    if [ -n "$JSON" ]; then
        echo -n $JSON | \
            jq -c "[( .[] | select(${ENCLAVE_JSON}) )]"
    fi
}

function filterLeadersLogsByEpoch {
    # STDIN: leaders logs json
    local EPOCH=$1

    jq -c --arg EPOCH "$EPOCH" \
       '[ .[] | select(.scheduled_at_date|startswith($EPOCH+".")) ]'
}

function getSlotsCountForEpoch {
    # STDIN: leaders logs json

    local EPOCH=$1
    jq --arg EPOCH "$EPOCH" \
       '[ .[] | select(.scheduled_at_date|startswith($EPOCH+".")) ] | length'
}

function sendSlotsCountToPooltool {
    local EPOCH=$1
    local SLOTS_COUNT=$2

    local PAYLOAD=$(jq -n -c \
                       --arg CURRENTEPOCH "$EPOCH" \
                       --arg POOLID "$POOL_ID" \
                       --arg USERID "$POOLTOOL_USER_ID" \
                       --arg GENESISPREF "$GENESISPREF" \
                       --arg ASSIGNED "$SLOTS_COUNT" \
                       '{currentepoch: $CURRENTEPOCH, poolid: $POOLID,  genesispref: $GENESISPREF, userid: $USERID, assigned_slots: $ASSIGNED}'
          )
    logInfo "Sending count of assigned slots to pooltool.io"
    logInfo "Request payload: $PAYLOAD"

    local RESPONSE=$(echo -n "$PAYLOAD" | curl -sSf \
                                               -H 'Accept: application/json' \
                                               -H 'Content-Type:application/json' \
                                               -X POST --data @- \
                                               'https://api.pooltool.io/v0/sendlogs')
    local RESULT_CODE=$?
    [ -n "$RESPONSE" ] && logInfo "Response: $RESPONSE"
    return $RESULT_CODE
}

function getStoreFileForEpoch {
    local EPOCH=$1

    echo -n "$(dirname $(mktemp -u -t))/publish-to-pooltool.slots.pool-$POOL_ID.epoch-$EPOCH"
}

function sendSlotsToPoolTool {
    local -i EPOCH=$1
    local -i SLOTS_COUNT=$2
    local slotsJsonForEpoch=$3

    # Remove rather old files. Several just in case we missed to delete some file.
    rm -f "$(getStoreFileForEpoch $(( $EPOCH - 9 )))"
    rm -f "$(getStoreFileForEpoch $(( $EPOCH - 8 )))"
    rm -f "$(getStoreFileForEpoch $(( $EPOCH - 7 )))"

    local previousEpochFileName="$(getStoreFileForEpoch $(( $EPOCH - 1 )))"
    local thisEpochFileName="$(getStoreFileForEpoch $EPOCH)"
    local PREVIOUS_EPOCH_SLOTS
    if [ -f "$previousEpochFileName" ]; then
        PREVIOUS_EPOCH_SLOTS=$(cat $previousEpochFileName)
    fi
    if [ ! -f "$previousEpochFileName" ]; then
        touch "$thisEpochFileName"
        chmod 600 "$thisEpochFileName"
        echo -n "$slotsJsonForEpoch" > "$thisEpochFileName"
    fi

    local CURRENT_EPOCH_HASH=$(sha256sum < "$thisEpochFileName" | cut -d" " -f1)

    local PAYLOAD=$(jq -n -c \
                       --arg CURRENTEPOCH "$EPOCH" \
                       --arg POOLID "$POOL_ID" \
                       --arg USERID "$POOLTOOL_USER_ID" \
                       --arg GENESISPREF "$GENESISPREF" \
                       --arg ASSIGNED "$SLOTS_COUNT" \
                       --arg HASH "$CURRENT_EPOCH_HASH" \
                       --arg SLOTS "$PREVIOUS_EPOCH_SLOTS" \
                       '{currentepoch: $CURRENTEPOCH, poolid: $POOLID,  genesispref: $GENESISPREF, userid: $USERID, assigned_slots: $ASSIGNED'"$([ -n "$CURRENT_EPOCH_HASH" ] && echo -n ', this_epoch_hash: $HASH')""$([ -n "$PREVIOUS_EPOCH_SLOTS" ] && echo -n ', last_epoch_slots: $SLOTS')"'}')

    logInfo "Sending count of assigned slots to pooltool.io"
    logInfo "Request payload: $PAYLOAD"

    local RESPONSE=$(echo -n "$PAYLOAD" | curl -sSf \
                                               -H 'Accept: application/json' \
                                               -H 'Content-Type:application/json' \
                                               -X POST --data @- \
                                               'https://api.pooltool.io/v0/sendlogs')
    local RESULT_CODE=$?
    [ -n "$RESPONSE" ] && logInfo "Response: $RESPONSE"
    return $RESULT_CODE
}

function sendTipToPoolTool {
    local nodeStatsJson="$1"

    local lastBlockHeight=$(echo -n $nodeStatsJson | jq -cr '.lastBlockHeight')
    local lastBlockHash=$(echo -n $nodeStatsJson | jq -cr '.lastBlockHash')
    local jormVersion=$(echo -n $nodeStatsJson | jq -cr '.version')

    if [ -n "$lastBlockHeight" ] && [ -n "$lastBlockHash" ]; then
        if [ -z "$WO_BLOCK_FIELDS_REPORT" ]; then
            local BLOCK=$(curl -sSf "$JORMUNGANDR_RESTAPI_URL/v0/block/$lastBlockHash" | xxd -ps -c9999999999)
            local BLOCK_RESULT_CODE=$?
        fi
        if [ -n "$BLOCK" ] && (( $BLOCK_RESULT_CODE == 0 )) ; then
            local lastPoolID=${BLOCK:168:64}
            local lastParent=${BLOCK:104:64}
            local lastSlot=$((0x${BLOCK:24:8}))
            local lastEpoch=$((0x${BLOCK:16:8}))
            local RESPONSE=$(curl -sSf -X GET --get \
                                  --data-urlencode "platform=${PLATFORM}" \
                                  --data-urlencode "jormver=${jormVersion}" \
                                  --data "poolid=${POOL_ID}" \
                                  --data "userid=${POOLTOOL_USER_ID}" \
                                  --data "genesispref=${GENESISPREF}" \
                                  --data "mytip=${lastBlockHeight}" \
                                  --data "lasthash=${lastBlockHash}" \
                                  --data "lastpool=${lastPoolID}" \
                                  --data "lastparent=${lastParent}" \
                                  --data "lastslot=${lastSlot}" \
                                  --data "lastepoch=${lastEpoch}" \
                                  "https://api.pooltool.io/v0/sharemytip"
                  )
            local RESULT_CODE=$?
            local logMessage="Publish tip request: curl -sSf --get --data-urlencode 'platform=${PLATFORM}' --data-urlencode 'jormver=${jormVersion}' https://api.pooltool.io/v0/sharemytip?poolid=${POOL_ID}&userid=${POOLTOOL_USER_ID}&genesispref=${GENESISPREF}&mytip=${lastBlockHeight}&lasthash=${lastBlockHash}&lastpool=${lastPoolID}&lastparent=${lastParent}&lastslot=${lastSlot}&lastepoch=${lastEpoch}"
        else
            local RESPONSE=$(curl -sSf -X GET --get \
                                  --data-urlencode "platform=${PLATFORM}" \
                                  --data-urlencode "jormver=${jormVersion}" \
                                  --data "poolid=${POOL_ID}" \
                                  --data "userid=${POOLTOOL_USER_ID}" \
                                  --data "genesispref=${GENESISPREF}" \
                                  --data "mytip=${lastBlockHeight}" \
                                  --data "lasthash=${lastBlockHash}" \
                                  "https://api.pooltool.io/v0/sharemytip"
                  )
            local RESULT_CODE=$?
            local logMessage="Publish tip request: curl -sSf --get --data-urlencode 'platform=${PLATFORM}' --data-urlencode 'jormver=${jormVersion}' https://api.pooltool.io/v0/sharemytip?poolid=${POOL_ID}&userid=${POOLTOOL_USER_ID}&genesispref=${GENESISPREF}&mytip=${lastBlockHeight}&lasthash=${lastBlockHash}"
        fi

        if (( RESULT_CODE != 0 )); then
            logWarn "$logMessage"
            [ -n "$RESPONSE" ] && logWarn "Responce: $RESPONSE"
            logWarn "Return code is not 0"
        else
            logTrace "$logMessage"
            [ -n "$RESPONSE" ] && logTrace "Responce: $RESPONSE"
        fi
    fi
}

function doOnce {
    local nodeStatsJson=$(fetchNodeStats)
    if [ -z "$nodeStatsJson" ]; then
        return 1
    fi
    local epoch=$(echo -n $nodeStatsJson | getCurrentEpoch)
    if is_number $epoch; then
        if [ -n "$MANUAL_SLOTS_COUNT" ]; then
            sendSlotsCountToPooltool $epoch $MANUAL_SLOTS_COUNT
            exit 0
        elif [ -z "$WO_SLOTS_COUNT_REPORT" ] ; then
            if [ -n "$LAST_REPORTED_EPOCH" ] || [ -n "$WITH_SLOTS_COUNT_REPORT_ON_START" ]; then
                if (( $epoch > ${LAST_REPORTED_EPOCH:-0} )); then
                    local currentTime=$(date +%s)
                    if (( $currentTime > (${LAST_SLOTS_COUNT_REPORT_TRY_TIME:-0} + 300) )); # Try not more than once every 5 minutes
                    then
                        local -i tryCount=0
                        local slotsCount=0
                        while true
                        do
                            (( tryCount++ ))
                            local leadersLogs=$(fetchLeadersLogs | filterLeadersLogsByEpoch "$epoch")
                            local -i slotsCount=$(echo -n "$leadersLogs" | jq -r '. | length')
                            LAST_SLOTS_COUNT_REPORT_TRY_TIME=$(date +%s)
                            if is_number $slotsCount; then
                                if (( $slotsCount > 0 )) || (( tryCount >= 6 )); then
                                    sendSlotsToPoolTool "$epoch" "$slotsCount" "$leadersLogs" \
                                        && LAST_REPORTED_EPOCH="$epoch" \
                                        && break
                                fi
                            fi
                            (( tryCount >= 6 )) && break
                            sleep 10
                        done
                        if (( $epoch != ${LAST_REPORTED_EPOCH:-0} )); then
                            logError "Cannot get count of slots" >&2
                        fi
                    fi
                fi
            else
                # Report onlly when epoch changed. Do not report the state at start time as the leaders logs
                # contain all allocated blocks with sure only at the epoch beginning time.
                LAST_REPORTED_EPOCH=$epoch
            fi
        fi
        LAST_EPOCH=$epoch

        if [ -z "$WO_TIP_REPORT" ]; then
            sendTipToPoolTool "$nodeStatsJson"
        fi
    else
        logError "Cannot get current epoch number" >&2
    fi
}


doOnce

while [ -n "$INTERVAL" ]
do
    sleep "${INTERVAL}s"
    doOnce
done

exit 0
