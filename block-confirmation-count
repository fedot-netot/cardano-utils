#!/bin/bash

. cardano-utils-common

DEFAULT_MAX_COUNT=20

function showHelp() {
    cat <<EOF
usage: $(basename $0) [-m MAXCOUNT] [-h] BLOCK_ID
  -m  Do not count confirmations after this one. Default value is ${DEFAULT_MAX_COUNT}.
  -n  Print only number.
  -h  Show this help.

Prints count of blocks that based on specified block BLOCK_ID.
EOF
}

MAX_COUNT=$DEFAULT_MAX_COUNT

while getopts 'm:L:nh' c
do
    case $c in
        m) if ! is_number $OPTARG; then
               echo 'Wrong value for option `-m`' >&2
               showHelp;
               exit 1
           fi
           MAX_COUNT=$OPTARG
           ;;
        n) ONLY_NUMBER="yes" ;;
        h) showHelp; exit 0 ;;
        L) case "$OPTARG" in
               error) LOG_LEVEL=1;;
               warn) LOG_LEVEL=2;;
               info) LOG_LEVEL=3;;
               debug) LOG_LEVEL=4;;
               trace) LOG_LEVEL=5;;
               *) logError 'Wrong value for option `-L`' >&2; showHelp >&2; exit 1;;
           esac;;
        *) showHelp; exit 1 ;;
    esac
done

shift $((OPTIND-1))

if [ -n "$2" ]; then
    echo "Odd argument specified: \`$2\`" >&2
    showHelp
    exit 1
fi



BLOCK_ID=$1

if [ -z "$BLOCK_ID" ]; then
    echo 'BLOCK_ID is mandatory' >&2
    showHelp
    exit 1
fi

function getNextBlock {
    local TEXT ERR_MSG
    local THIS_BLOCK_ID=$(cat)
    unset STAKE_INFO_OUTPUT
    eval "$( (jcli rest v0 block ${THIS_BLOCK_ID} next-id get) 2> >(ERR_MSG=$(cat); declare -p ERR_MSG) > >(TEXT=$(cat); declare -p TEXT) )"
    if [ -n "$ERR_MSG" ]; then logError "$ERR_MSG" >&2; fi
    if [ -n "$TEXT" ]; then
        echo -n $TEXT
    fi
}

COUNTER=0
NEXT_BLOCK_ID=$(echo -n "$BLOCK_ID" | getNextBlock)

while [ -n "$NEXT_BLOCK_ID" ]
do
    logTrace "next-id: $NEXT_BLOCK_ID" >&2
    (( COUNTER++ ))
    (( COUNTER >= MAX_COUNT )) && break
    NEXT_BLOCK_ID=$(echo -n "$NEXT_BLOCK_ID" | getNextBlock)
done

if [ -n "$ONLY_NUMBER" ]; then
    printf "%d" $COUNTER
else
    echo "Confirmation blocks count: $COUNTER"
fi
